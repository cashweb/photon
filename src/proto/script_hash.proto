syntax = "proto3";

package script_hash;

message BalanceRequest {
  // The script hash as bytes.
  bytes script_hash = 1;
}

message BalanceResponse {
  // Confirmed balance in Satoshi's.
  uint64 confirmed = 1;
  // Unconfirmed balance in Satoshi's.
  uint64 unconfirmed = 2;
}

message ScriptHashHistoryRequest {
  // The script hash as bytes.
  bytes script_hash = 1;
  // The start height from which to retrieve the history. 0 for the beginning of
  // time.  Special case: Specify UINT_MAX (eg 4294967295), along with an offset
  // of UINT_MAX (4294967295) to retrieve only the mempool_items and no
  // confirmed_items in the ScriptHashHistoryResponse.
  uint32 start_height = 2;
  // The offset from start_height at which to end the history retrieval (exclusive range
  // end).
  // Additionally, `offset` and `start_height` have the following special behavior:
  // - If offset==0, all history to latest will be retrieved, *without*
  //   the mempool (mempool_items will always be empty in the ScriptHashHistoryResponse below).
  // - If offset==UINT_MAX (4294967295), then all of the history starting from
  //   start_height up until the latest confirmed transactions will be retrieved and
  //   placed into confirmed_items, plus the mempool_items array will also be filled-in
  //   with any tx's involving script_hash currently in the mempool.
  // - All other positive values for offset just indicate an exclusive range ending offset
  //   from start_height at which to end the query.  mempool_items is never filled-in
  //   however, unless offset==UINT_MAX.

  //   Examples:
  //   1. If start_height=1001 and offset=2, and the chain is presently at block
  //      600,000, only confirmed history items from block 1001 and block 1002 will be
  //      returned and placed in confirmed_items, and mempool_items will be empty.
  //   2. *However*, if start_height=1001 and offset=UINT_MAX and the chain is
  //      presently at block 600,000, then the confirmed tx's for the script_hash from block
  //      1001 up until 600,000 will be returned, plus any unconfirmed
  //      tx's involving script_hash from the mempool will be placed in mempool_items as well.
  //   3. Conversely, if start_height=UINT_MAX and offset=UINT_MAX, then only mempool_items (if any)
  //      involving script_hash will be returned. (confirmed_items will always be empty in the
  //      ScriptHashHistoryResponse below).
  //   4. Setting start_height=UINT_MAX and offset!=UINT_MAX will always return nothing.
  //
  //   In this way, the `offset` can be used to control whether the client wants
  //   mempool_items or not in the response, by using the special value UINT_MAX (4294967295).
  //
  //   Conversely, `start_height` can be used to control whether to omit confirmed_items
  //   in the response and only retrieve mempool_items (by setting both start_height and offset to
  //   UINT_MAX eg 4294967295).
  //
  //   One final note: if offset != UINT_MAX, and offset + start_height > chain_height (and
  //   start_height != UINT_MAX), then the query will just behave identically to offset=0
  //   (that is, all confirmed_items from start_height until present will be returned, with
  //   mempool_items being empty).
  uint32 offset = 3;
}

message ScriptHashHistoryResponse {
  // Each confirmed transaction is a message:
  message ConfirmedItem {
    // The integer height of the block the transaction was confirmed in.
    uint32 height = 1;
    // The transaction hash as bytes.
    bytes tx_hash = 2;
  }
  message MempoolItem {
    // The transaction hash as bytes.
    bytes tx_hash = 1;
    // The transaction fee in Satoshi's.
    uint64 fee = 2;
    // If true, the tx in question has at least 1 input that is also in the mempool (is unconfirmed)
    // If false, all inputs to this tx are confirmed.
    bool has_unconfirmed_parent = 3;
  }
  repeated ConfirmedItem confirmed_items = 1;
  repeated MempoolItem mempool_items = 2;
}

message ListUnspentRequest {
  // The script hash as bytes.
  bytes script_hash = 1;
}

message ListUnspentResponse {
  message UnspentItem {
    // The integer height of the block the transaction was confirmed in. 0 if
    // the transaction is in the mempool.
    int32 height = 1;
    // The output’s transaction hash as bytes.
    bytes tx_hash = 2;
    // The zero-based index of the output in the transaction’s list of outputs.
    uint32 v_out = 3;
    // The output’s value in Satoshi's.
    uint64 value = 4;
  }
  repeated UnspentItem items = 1;
}

message SubscribeScriptHashRequest {
  // The script hash as bytes.
  bytes script_hash = 1;
}

message SubscribeScriptHashResponse {
  // The confirmed status of the script hash. This is the hash256 of: all confirmed
  // transaction hashes relevant to this script hash, in height then
  // lexicographical order.
  bytes confirmed_status = 1;
  // The unconfirmed status of the script hash. This is the hash256 of: the
  // concatenation of mempool transactions in lexicographical order.
  bytes unconfirmed_status = 2;
}

/* // Commented-out for now as we may not need this. May be overkill. -Calin
message ScriptHashExtendedStatusResponse {
  bytes status = 1; //< same as the SubscribeScriptHashResponse.status above
  int32 num_tx = 2; //< the number of transactions total (including mempool)
  repeated ScriptHashStatusChunk chunks = 3;
}

message ScriptHashStatusChunk {
  // the hash as in the old ElectrumX status_hash just for the tx's in this
  // chunk
  bytes status = 1;
  // The number of tx's in this chunk. Note that usually the server will attempt
  // to chunk the statuses in groups of 100 or 1000 or whatever that particular
  // server is configured for, but if it cannot do so because some block height
  // contains many tx's, this number may not be the same for each chunk.
  int32 num_tx = 2;
  // the blockchain height of the first tx in this chunk. Except the last chunk
  // of mempool items which will have this field set to -1.
  int32 start_height = 3;
  // the blockchain height of the last tx in this chunk. Note that the next
  // chunk will necessarily have its .start_height be > this.end_height, except
  // for the mempool chunks at the end which all have start_height = end_height
  // = -1
  int32 end_height = 4;
}
*/

service ScriptHash {
  // Return the confirmed and unconfirmed balances of a script hash.
  rpc Balance(BalanceRequest) returns (BalanceResponse);
  // Return the confirmed and unconfirmed history of a script hash.
  rpc ScriptHashHistory(ScriptHashHistoryRequest)
      returns (ScriptHashHistoryResponse);
  // Return an ordered list of UTXOs sent to a script hash.
  rpc ListUnspent(ListUnspentRequest) returns (ListUnspentResponse);
  // Subscribe to a script hash.
  rpc SubscribeScriptHash(SubscribeScriptHashRequest)
      returns (stream SubscribeScriptHashResponse);
  /*
  // Gets the status chunks for a script hash so the client may figure out where
  // the server and client histories differ (in the case where the initial
  // subscribe response returns a novel scripthash status to the client).
  rpc ScriptHashExtendedStatus(SubscribeScriptHashRequest)
      returns (ScriptHashExtendedStatusResponse);
  */
}
