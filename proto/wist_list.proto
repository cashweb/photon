syntax = "proto3";

package wish_list;

message TXOInfoRequest {
    message TXO {
        // The transaction hash as bytes
        bytes txid = 1;
        // The transaction output's 0-indexed position in txid
        uint32 pos = 2;
    }
    // The list of txo's we are querying about
    repeated TXO txos = 1;
}

message TXOInfoResponse {
    message TXOInfo {
        // The actual output script as it appeared in the tx. This can be further parsed by the client to derive the address.
        bytes script = 1;
        // The output's amount in satoshis
        uint64 amount = 2;

        message SpentInfo {
            // If not empty, the txid that spent this output
            bytes txid  = 1; //< Note to Harry: if this proves costly performance-wise to obtain, just a bool here if it was spent would also help!
            // The input number in txid where this txo appears.
            uint32 pos = 2; //< Note to Harry: again, these two fields can just be collapsed down to a bool...
        }
        // Note to Harry: I'm not sure which one of the below to use here. Minimally it's nice to
        // know if a txo was spent.  But optionally if it's not too slow on the server-side, it's nice
        // to know where a txo was spent if it was spent.  This helps wallets out with UI.
        // Note 2: not sure if this 'oneof' syntax here is correct. I made this a oneof so that unspent=true *OR*
        //         the spent_info will be populated.  If it turns out retrieving spent_info like this is slow,
        //         can just use the bool.
        oneof spent {
            // if defined, was spent. Info on where it was spent.
            SpentInfo info = 3;
            // if defined, always true; indicates the txo was not spent
            bool unspent = 4;
        }
    }
    // The whole point of this message is to contain a oneof
    // where either not_found is defined (in which case the txo in question does not exist),
    // or info is defined (in which case it exists and the info is returned).
    message TXOInfoOrNotFound {
        oneof txo {
            // if defined, the txo was found, and this is its info
            TXOInfo info = 1;
            // iff defined, it will always be true. Indicates this txo was not found.
            // This is to allow client to actually query if txo's are valid/invalid without receiving an error
            // response. (Useful for CashShuffle and possibly even CashFusion to quickly detect invalid participants)
            bool not_found = 2;
        }
    }
    // The list of responses for each of the txo's mentioned in TXOInfoRequest.txos[i]
    repeated TXOInfoOrNotFound txos = 1;
}

service WishList {
    // Get information on some txo's, such as script, value and/or if it was spent and where it was spent.
    rpc TXOInfo(TXOInfoRequest) returns (TXOInfoResponse);
}
